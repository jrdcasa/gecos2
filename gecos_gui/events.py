import PySimpleGUI as Sg
import sys
import webbrowser
import os
import site
import glob
from collections import defaultdict
from gecos_gui.events_check import check_server_stuffs, popup_error, \
    check_partition_stuffs, check_nodemaster, check_remotedir, \
    check_g16_stuffs, check_dblog_pattern, check_files_localdir,\
    check_types, check_prop_conformers, popup_msg,\
    check_prop_types
from gecos_gui.events_import import import_pythonfile_to_gui, \
    import_pythonfileprops_to_gui
from gecos_gui.events_export import write_python_script_from_gui, write_python_script_prop_from_gui
from gecos_gui.events_open import open_window_log, open_advance_window_openbabel, \
    open_advance_window_rdkit, open_window_results, open_advance_window_extractmd, \
    open_advance_window_systematicgrid, open_advance_window_cluster_qmrmsd, \
    open_advance_window_folderwithpdb

lizard_gif = b''
image_found = False
for ipath in site.getsitepackages():
    g = glob.glob(os.path.join(ipath, 'gecos*', 'gecos_gui', 'lizard_small.gif'))
    if g:
        lizard_gif = g[0]
        image_found = True
        break

keys_input_str_labels = {'-MOLECULE_INPUT-', '-NAME_SERVER-', '-USER_NAME-', '-SLURM_PART-',
                         '-NODE_MASTER-', '-SLURM_PART_MASTER-', '-LOCAL_DIR-', '-REMOTE_DIR-',
                         '-PATTERN-', '-DATABASE_NAME-', '-FILENAME_LOG-', '-G16_KEYWORDS-',
                         '-DOCKRMSDPACK-', '-KEY_SSH_FILE-', '-ENCRYPT_PASS_FILE-', '-GAUSSIAN16PACK-',
                         '-PATTERN-', '-DATABASE_NAME-', '-FILENAME_LOG-', '-TIME_NODES-'}
keys_input_str_labels_enter = {'-MOLECULE_INPUT-_Enter', '-NAME_SERVER-_Enter', '-USER_NAME-_Enter',
                               '-SLURM_PART-_Enter', '-NODE_MASTER-_Enter', '-SLURM_PART_MASTER-_Enter',
                               '-LOCAL_DIR-_Enter', '-REMOTE_DIR-_Enter', '-PATTERN-_Enter',
                               '-DATABASE_NAME-_Enter', '-FILENAME_LOG-_Enter', '-G16_KEYWORDS-_Enter',
                               '-DOCKRMSDPACK-_Enter', '-KEY_SSH_FILE-_Enter', '-ENCRYPT_PASS_FILE-_Enter',
                               '-GAUSSIAN16PACK-_Enter', '-PATTERN-_Enter', '-DATABASE_NAME-_Enter',
                               '-FILENAME_LOG-_Enter'}
keys_input_list_labels = {'-EXCLUDE_NODES-'}
keys_input_list_labels_enter = {'-EXCLUDE_NODES-_Enter'}

#cJ keys_input_int_labels = {'-G16_NPROC-', '-G16_MEM-', '-NCONF-', '-MIN_ITER_MM-', '-CHARGE-', '-MULTIPLICITY-',
#cJ                          '-MAX_JOBS_SLURM-'}
keys_input_int_labels = {'-G16_NPROC-', '-G16_MEM-', '-CHARGE-', '-MULTIPLICITY-',
                          '-MAX_JOBS_SLURM-'}
#cJ keys_input_int_labels_enter = {'-G16_NPROC-_Enter', '-G16_MEM-_Enter', '-NCONF-_Enter', '-MIN_ITER_MM-_Enter',
#cJ                                '-CHARGE-_Enter', '-MULTIPLICITY-_Enter', '-MAX_JOBS_SLURM-_Enter'}
keys_input_int_labels_enter = {'-G16_NPROC-_Enter', '-G16_MEM-_Enter',
                               '-CHARGE-_Enter', '-MULTIPLICITY-_Enter', '-MAX_JOBS_SLURM-_Enter'}

# cJ keys_input_float_labels = {'-CUTOFF_RMSD_QM-', '-CUTOFF_ENERGY_QM-'}
keys_input_float_labels = {}

#cJ keys_input_conformer_keywords = {"-NCONF-", "-MIN_ITER_MM-",
#cJ                                  "-CUTOFF_RMSD_QM-", "-CUTOFF_ENERGY_QM-", "-BOND_PERCEPTION-"}
#cJ keys_input_conformer_keywords_enter = {"-NCONF-_Enter", "-MIN_ITER_MM-_Enter",
#cJ                                        "-CUTOFF_RMSD_QM-_Enter", "-CUTOFF_ENERGY_QM-_Enter",
#cJ                                        "-BOND_PERCEPTION-_Enter"}

keys_checkbox_labels = {"-BOND_PERCEPTION-": False}

keys_combo_labels = {'-CONFPACK-': 'rdkit'}

keys_all_mainguibuttons_labels = ['-BUTTONIMPORTPYTHON-', '-BUTTONCHECK-', '-BUTTONRUN-',
                                  '-BUTTONCREATESCRIPT-', '-BUTTONVISRESULTS-', '-BUTTONVIEWLOG-']

keys_properties = ['-QM_PROP_LOCAL_DIR-', '-QM_PROP_MOL2LOCAL_DIR-', '-KEYWORD_LINE-',
                   '-INPUT_DATABASE_PROP-', '-INPUT_LOG_PROP-', '-QM_PROP_CUTOFF_ENERGY-',
                   '-QM_PROP_REMOTE_DIR-', '-CHECKBOX_RUN_GAUSSIAN_OPT_PROP-']
keys_properties_enter = ['-QM_PROP_LOCAL_DIR-_Enter', '-QM_PROP_MOL2LOCAL_DIR-_Enter',
                         '-KEYWORD_LINE-_Enter', '-INPUT_DATABASE_PROP-_Enter',
                         '-INPUT_LOG_PROP-_Enter', '-QM_PROP_CUTOFF_ENERGY-_Enter',
                         '-QM_PROP_REMOTE_DIR-_Enter']

keys_extract = ['-MOLECULE_INPUT_EXTRACT-', '-METHOD_EXTRACT-', '-RADIUS_SPHERE-']

rdkit_dict_options = defaultdict()
rdkit_dict_options['-RDKIT_NCONF-'] = 200
rdkit_dict_options['-RDKIT_MIN_ITER_MM-'] = 0
rdkit_dict_options['-RDKIT_MAXATTEMPTS-'] = 1000
rdkit_dict_options['-RDKIT_PRUNERMSTHRESH-'] = 0.1      # A
rdkit_dict_options['-RDKIT_USEEXPTORSIONANGLEPREFS-'] = True
rdkit_dict_options['-RDKIT_USEBASICKNOWLEDGE-'] = True
rdkit_dict_options['-RDKIT_ENFORCECHIRALITY-'] = True
rdkit_dict_options['-RDKIT_FFNAME-'] = "MMFF"
rdkit_dict_options['-RDKIT_CLUSTER_METHOD-'] = "None"
rdkit_dict_options['-RDKIT_RMSD_THRES-'] = 1.0          # A
rdkit_dict_options['-RDKIT_ENERGY_THRES-'] = 1.0        # kcal/mol
rdkit_dict_options['-RDKIT_ROTCONST_THRES-'] = 0.0005   # cm-1
rdkit_dict_options['-RDKIT_WINDOW_ENERGY-'] = 100.0     # kcal/mol
rdkit_dict_options['-RDKIT_RMSD_ONLY_HEAVY-'] = True

openbabel_dict_options = defaultdict()
openbabel_dict_options['-CONFAB_NCONF-'] = 4000000
openbabel_dict_options['-CONFAB_MIN_ITER_MM-'] = 0
openbabel_dict_options['-CONFAB_RMSD_CUTOFF-'] = 0.5   # Angstroms
openbabel_dict_options['-CONFAB_ENERGY_CUTOFF-'] = 50.0  # kcal/mol
openbabel_dict_options['-CONFAB_VERBOSE-'] = False     # Verbose
openbabel_dict_options['-CONFAB_RMSD_CUTOFF_RMSDDOCK-'] = 0.5   # Angstroms
openbabel_dict_options['-CONFAB_FFNAME-'] = "MMFF"
openbabel_dict_options['-CONFAB_ENERGY_THRESHOLD-'] = 99999.0
openbabel_dict_options['-CONFAB_MAX_ENERGY_CLUSTERS-'] = 100

extractmd_dict_options = defaultdict()
extractmd_dict_options['-METHOD_EXTRACT-'] = "Sphere_COM"
extractmd_dict_options['-RADIUS_SPHERE-'] = 7.0
extractmd_dict_options['-EXTRACT_MONOMER-'] = True
extractmd_dict_options['-EXTRACT_PAIR-'] = False
extractmd_dict_options['-EXTRACT_ONLYDIFFMOL-'] = False

systematicgrid_dict_options = defaultdict()
systematicgrid_dict_options['-SG_NDIHEDRALS-'] = 0
systematicgrid_dict_options['-SG_DIH_STEPS-'] = []
systematicgrid_dict_options['-SG_MM_OPTIMIZATION-'] = True
systematicgrid_dict_options['-SG_MM_MAX_ITER-'] = 1000
systematicgrid_dict_options['-SG_ADD_QM-'] = True

pdbfolder_dict_options = defaultdict()
pdbfolder_dict_options['-FOLDERPDB_INPUT-'] = None

cluster_qmrmsd_dict_options = defaultdict()
cluster_qmrmsd_dict_options['-CUTOFF_RMSD_QM-'] = 0.0
cluster_qmrmsd_dict_options['-CUTOFF_ENERGY_QM-'] = 9999.9

vmd_path = "/opt/vmd-1.9.4a55/bin/vmd"
pass_encrypted_file = ""
filename_json = ""
filename_py = ""


# =============================================================================
def clean_form(window):

    global vmd_path
    global pass_encrypted_file
    global rdkit_dict_options
    global openbabel_dict_options

    for ikey in keys_input_str_labels:
        window[ikey].update("")

    for ikey in keys_input_list_labels:
        window[ikey].update("")

    for ikey in keys_input_int_labels:
        window[ikey].update("")

    #cJ for ikey in keys_input_float_labels:
    #cJ     window[ikey].update("")

    for ikey, item in keys_checkbox_labels.items():
        window[ikey].update(item)

    for ikey, item in keys_combo_labels.items():
        window[ikey].update(item)

    vmd_path = "/opt/vmd-1.9.4a55/bin/vmd"
    pass_encrypted_file = ""

    window['-QM_PROP_LOCAL_DIR-'].update("")
    window['-NUM_MOL2FILES-'].update(0)
    window['-INPUT_METHOD_PROP-'].update('M062X')
    window['-INPUT_BASISSET_PROP-'].update('6-311G**')
    window['-KEYWORD_LINE-'].update('#p M062X/6-311G**')
    window['-COMBO_MODELSOLVENT_PROP-'].update('None')
    window['-COMBO_SOLVENT_PROP-'].update('None')
    window['-INPUT_DATABASE_PROP-'].update("")
    window['-INPUT_LOG_PROP-'].update("")
    window['-RADIO_SP-'].update(True)
    window['-INPUT_SCALEVAL_FREQ-'].update(disabled=True)
    window['-CHECKBOX_ANHAR_FREQ-'].update(disabled=True)
    window['-GAUSSIAN16_EXTRAINFO-'].update("")
    window['-BASH_EXTRAINFO-'].update("")


# =============================================================================
def check_parameteres_gui(window, values):

    """

    Args:
        window:
        values:

    Returns:

    """

    global pass_encrypted_file

    files_localpath_string = ['-MOLECULE_INPUT-', '-LOCAL_DIR-', '-DOCKRMSDPACK-']
    str_databases_outputs = ['-PATTERN-', '-DATABASE_NAME-', '-FILENAME_LOG-']

    v = values['-CONFPACK-']
    a = window['-CONFPACK-'].Values
    if v.lower() not in a:
        msg = "Conformer program: {} must be in {}.\n  ".format(v, a)
        popup_error(window, msg)
        return False

    dict_options = defaultdict()
    dict_options["nameserver"] = window['-NAME_SERVER-'].get()
    dict_options["username"] = window['-USER_NAME-'].get()
    dict_options["keyfile"] = window['-KEY_SSH_FILE-'].get()
    dict_options["partition"] = window['-SLURM_PART-'].get()
    dict_options["partitionmaster"] = window['-SLURM_PART_MASTER-'].get()
    dict_options["nodemaster"] = window['-NODE_MASTER-'].get()
    dict_options["remotedir"] = window['-REMOTE_DIR-'].get()
    dict_options["g16path"] = window['-GAUSSIAN16PACK-'].get()

    # Check files in the local directory ======================================
    status = check_files_localdir(window, files_localpath_string)
    if not status:
        return False

    # # Check server stuffs =====================================================
    server, status = check_server_stuffs(window, dict_options, pass_encrypted_file)
    if not status:
        return False

    # Check partition stuffs ==================================================
    status = check_partition_stuffs(window, dict_options, server)
    if not status:
        return False

    # Check nodemaster stuffs ==================================================
    status = check_nodemaster(window, dict_options, server)
    if not status:
        return False

    # Check remote_dir stuffs ==================================================
    status = check_remotedir(window, dict_options, server)
    if not status:
        return False

    # Check pattern, database_name and log
    status = check_dblog_pattern(window, str_databases_outputs)
    if not status:
        return False

    # Check gaussian keywords and check gaussian path ================================
    status = check_g16_stuffs(window, dict_options, server)
    if not status:
        return False

    # Check for integers and floats =======================================================
    status = check_types(window, keys_input_int_labels, keys_input_float_labels)
    if not status:
        return False

    return True


# =============================================================================
def check_parameteres_prop_gui(window, dict_properties):

    """

    Args:
        window:
        dict_properties:

    Returns:

    """

    global pass_encrypted_file

    dict_options = defaultdict()

    dict_options["nameserver"] = window['-NAME_SERVER-'].get()
    if len(dict_options["nameserver"]) == 0:
        return False, "nameserver"
    dict_options["username"] = window['-USER_NAME-'].get()
    if len(dict_options["username"]) == 0:
        return False, "username"
    dict_options["keyfile"] = window['-KEY_SSH_FILE-'].get()
    if len(dict_options["keyfile"]) == 0:
        return False, "keyfile"
    dict_options["partition"] = window['-SLURM_PART-'].get()
    if len(dict_options["partition"]) == 0:
        return False, "partition"
    dict_options["partitionmaster"] = window['-SLURM_PART_MASTER-'].get()
    if len(dict_options["partitionmaster"]) == 0:
        return False, "partitionmaster"
    dict_options["nodemaster"] = window['-NODE_MASTER-'].get()
    dict_options["g16path"] = window['-GAUSSIAN16PACK-'].get()
    if len(dict_options["g16path"]) == 0:
        return False, "g16path"
    dict_options["remotedir"] = window['-QM_PROP_REMOTE_DIR-'].get()
    if len(dict_options["remotedir"]) == 0:
        return False, "remotedir"

    dict_options["env_combo"] = window["-ENV_COMBO-"].get()
    if len(dict_options["env_combo"]) == 0:
        return False, "env_combo"
    dict_options["bash_extrainfo"] = window["-BASH_EXTRAINFO-"].get()
    if dict_options["env_combo"] != 'None' and len(dict_options["bash_extrainfo"]) == 0:
        return False, "bash_extrainfo"

    # # Check server stuffs =====================================================
    server, status = check_server_stuffs(window, dict_options, pass_encrypted_file)
    if not status:
        return False, "N/A"

    # Check partition stuffs ==================================================
    status = check_partition_stuffs(window, dict_options, server)
    if not status:
        return False, "N/A"

    # Check gaussian keywords and check gaussian path ================================
    status = check_g16_stuffs(window, dict_options, server)
    if not status:
        return False, "N/A"

    # Check parameters for properties.
    status = check_prop_conformers(window, keys_properties, dict_properties)
    if not status:
        return False, "N/A"

    # Check for integers and floats =======================================================
    dd = {'-CHARGE-', '-G16_NPROC-', '-MULTIPLICITY-', '-G16_MEM-'}
    status = check_prop_types(window, dd)
    if not status:
        return False, "N/A"

    # Check remote_dir stuffs ==================================================
    status = check_remotedir(window, dict_options, server)
    if not status:
        return False, "N/A"

    return True, ""


# =============================================================================
def update_listmol2(window):

    path = window["-QM_PROP_MOL2LOCAL_DIR-"].get()
    cutoff = window["-QM_PROP_CUTOFF_ENERGY-"].get()
    tmplist = glob.glob(os.path.join(path, "*_allign.mol2"))
    listmol2 = []

    summary_energy_file = os.path.join(path, "summary_energy.txt")

    d_energy = defaultdict()
    if os.path.isfile(summary_energy_file):
        with open(summary_energy_file, 'r') as f:
            lines = f.readlines()
        for iline in lines:
            key = iline.split()[0]
            value = float(iline.split()[3])
            d_energy[key] = value
        minv = min(d_energy.values())
        for ikey, item in d_energy.items():
            d_energy[ikey] = item - minv
        d_energy_list = sorted(d_energy.items(), key=lambda x: x[1])
        for item in d_energy_list:
            ikey = item[0]
            ival = float(item[1])
            ii = ikey + "_allign.mol2"
            if ival < float(cutoff):
                listmol2.append(ii)
    else:
        for imol in tmplist:
            ii = os.path.split(imol)[-1]
            listmol2.append(ii)
    window['-LISTBOX_MOL2-'].update(values=listmol2)
    window['-NUM_MOL2FILES-'].update(value=str(len(listmol2)))
    window.refresh()
    return listmol2


# =============================================================================
def waiting_for_events(window, event, values):
    """
    All events in the GUI
    """

    global filename_json
    global filename_py

    # ======== BIND Keys to PROPERTIES ============
    for item in keys_input_str_labels:
        window[item].bind("<Return>", "_Enter")
        window[item].bind("<Tab>", "_Enter")
    for item in keys_input_list_labels:
        window[item].bind("<Return>", "_Enter")
        window[item].bind("<Tab>", "_Enter")
    for item in keys_input_int_labels:
        window[item].bind("<Return>", "_Enter")
        window[item].bind("<Tab>", "_Enter")
    window["-CONFPACK-"].bind("<Return>", "_Enter")
    window["-CONFPACK-"].bind("<Tab>", "_Enter")

    # =========== Find path to dockrmsd ===========
    # is_default_exe_found = False
    for isyspath in sys.path:
        path = os.path.join(isyspath, "thirdparty/dockrmsd.x")
        if os.path.isfile(path):
            window["-DOCKRMSDPACK-"].update(path)
            # is_default_exe_found = True

    # ============= Menu Events =============
    if event == 'Import Python Script...' or event == '-BUTTONIMPORTPYTHON-':
        clean_form(window)
        loc = window.current_location()
        filename_py = Sg.popup_get_file('Import Python file to GUI', no_window=False,
                                        location=loc, initial_folder="../tests",
                                        file_types=(("Python Files", "*.py"),))
        import_pythonfile_to_gui(window, filename_py, rdkit_dict_options,
                                 openbabel_dict_options,
                                 extractmd_dict_options, systematicgrid_dict_options, pdbfolder_dict_options)
        window['-BUTTONRUN-'].update(disabled=True)
        window['-BUTTONCHECK-'].update(disabled=False)
        try:
            value = os.path.join(window['-LOCAL_DIR-'].get(), filename_py)
            window['-HIDEPYTHONSCRIPT-'].update(value)
            window['-STATUS_TEXT-'].update("Status: Python script loaded. ({})".format(value))
            window['-INFORUN_TEXT-'].update("Advice: Check inputs or Run/Check Gecos")
            window['-BUTTONEXPORTPYTHON-'].update(disabled=False)
            fulldbpath = os.path.join(window['-LOCAL_DIR-'].get(), window['-DATABASE_NAME-'].get())
            if os.path.isfile(fulldbpath):
                window['-BUTTONVISRESULTS-'].update(disabled=False)
                window['-BUTTONVIEWLOG-'].update(disabled=False)
        except TypeError:
            pass

    if event == 'Write Python Script...' or event == "-BUTTONCREATESCRIPT-" or event == '-BUTTONEXPORTPYTHON-':
        loc = window.current_location()
        filename = Sg.popup_get_file('Write Python Script from GUI', no_window=False,
                                     location=loc, initial_folder="../tests", save_as=True,
                                     file_types=(("Python Files", "*.py"),))
        # noinspection PyBroadException
        try:
            write_python_script_from_gui(window,  filename, rdkit_dict_options,
                                         openbabel_dict_options, extractmd_dict_options, systematicgrid_dict_options,
                                         pdbfolder_dict_options, cluster_qmrmsd_dict_options, pass_encrypted_file, save=True)
            filename = os.path.splitext(filename)[0]
            # export_jsonfile_from_gui(window, filename+".json", rdkit_dict_options, openbabel_dict_options,
            #                          pass_encrypted_file, save=True)
            window['-BUTTONRUN-'].update(disabled=True)
            window['-BUTTONCHECK-'].update(disabled=False)
            value = os.path.join(window['-LOCAL_DIR-'].get(), filename+".py")
            window['-HIDEPYTHONSCRIPT-'].update(value)
            window['-STATUS_TEXT-'].update("Status: Python script created. ({})".format(value))
            window['-INFORUN_TEXT-'].update("Advice: Check inputs.")
        except TypeError as e:
            popup_error(window, "Python file cannot be exported. Error TypeError:"+str(e))
        except Exception as e:
            popup_error(window, "Python file cannot be exported. Error Exception:"+str(e))
        # except FileNotFoundError:
        #     print("H")
    if event == "Delete database and done file":
        try:
            os.remove("done")
        except FileNotFoundError:
            pass
        try:
            dbfile = window['-DATABASE_NAME-'].get()
            os.remove(dbfile)
        except FileNotFoundError:
            dbfile = None
            pass
        loc = window.current_location()
        window.disappear()
        Sg.popup('done and {} database are deleted.'.format(dbfile),
                 title='Info',
                 location=loc)
        window.reappear()

    if event == "Clean Form":
        clean_form(window)
        window['-STATUS_TEXT-'].update("Status: No data loaded")
        window['-INFORUN_TEXT-'].update("Advice: Import data from Json file or fill the forms")
        window['-HIDEPYTHONSCRIPT-'].update("")
        window['-BUTTONVIEWLOG-'].update(disabled=True)
        window['-BUTTONVISRESULTS-'].update(disabled=True)
        window['-BUTTONCHECK-'].update(disabled=True)

    if event == "About...":
        loc = window.current_location()
        window.disappear()
        Sg.popup('GeCos: Generation of Conformers', 'Version 1.0',
                 'PySimpleGUI Version', Sg.version, "Author: Javier Ramos",
                 "Biophymm Group IEM-CSIC", "Madrid (Spain)",
                 title='About this program',
                 grab_anywhere=True, location=loc, image=lizard_gif)
        window.reappear()

    # ============= BUTTON GENERAL INPUTS EVENTS =============
    if event == '-BUTTONCHECK-':

        for item in keys_all_mainguibuttons_labels:
            window[item].update(disabled=True)
        window.refresh()

        res = check_parameteres_gui(window, values)
        loc = window.current_location()
        x, y = window.size
        newloc = (loc[0] + (x / 2.)*0.5, loc[1] + (y / 2.)*0.5)

        if res:
            Sg.popup('Keywords seem to be correct!!!',
                     title='Check Inputs',
                     grab_anywhere=True, location=newloc, image=lizard_gif)
            window['-BUTTONCREATESCRIPT-'].update(disabled=True)
            window['-BUTTONRUN-'].update(disabled=False)
            window['-BUTTONIMPORTPYTHON-'].update(disabled=False)
            window['-STATUS_TEXT-'].update("Status: Keywords seem to be correct. Python script has been written.")
            window['-INFORUN_TEXT-'].update("Advice: Run Gecos.")
            if os.path.splitext(filename_json)[0] != "":
                basename = os.path.splitext(filename_json)[0]
            elif os.path.splitext(filename_py)[0] != "":
                basename = os.path.splitext(filename_py)[0]
            else:
                # msg = "Filename json and filename python are empty"
                # popup_error(window, msg)
                basename = "tmp"
            filename = basename + ".py"
            write_python_script_from_gui(window, filename, rdkit_dict_options,
                                         openbabel_dict_options, extractmd_dict_options, systematicgrid_dict_options,
                                         pdbfolder_dict_options, cluster_qmrmsd_dict_options,
                                         pass_encrypted_file, save=True)
            window['-HIDEPYTHONSCRIPT-'].update(filename)

        else:
            window['-STATUS_TEXT-'].update("Status: Keywords are not correct")
            window['-INFORUN_TEXT-'].update("Advice: Try to change incorrect parameters")
            window['-BUTTONCREATESCRIPT-'].update(disabled=True)
            window['-BUTTONIMPORTPYTHON-'].update(disabled=False)
            window['-BUTTONCHECK-'].update(disabled=True)

    if event == '-BUTTONADVANCE-':
        print(window['-CONFPACK-'].get().upper())
        loc = window.current_location()
        x, y = window.size
        newloc = (loc[0] + (x / 2.)*0.5, loc[1] + (y / 2.)*0.5)
        if window['-CONFPACK-'].get().upper() == 'RDKIT':
            open_advance_window_rdkit(newloc, rdkit_dict_options)
        elif window['-CONFPACK-'].get().upper() == 'OPENBABEL':
            open_advance_window_openbabel(newloc, openbabel_dict_options)
        elif window['-CONFPACK-'].get().upper() == 'EXTRACT FROM MD FRAME':
            open_advance_window_extractmd(newloc, extractmd_dict_options)
        elif window['-CONFPACK-'].get().upper() == 'SYSTEMATIC GRID':
            send_to_qm_freeze = open_advance_window_systematicgrid(newloc, systematicgrid_dict_options)
            if send_to_qm_freeze:
                line = ""
                for item in systematicgrid_dict_options['-SG_DIH_STEPS-']:
                    line += "D {} {} {} {} F\n".format(item[0], item[1], item[2], item[3])
                window['-GAUSSIAN16_EXTRAINFO-'].update(value=line)
        elif window['-CONFPACK-'].get().upper() == 'FOLDER WITH PDB FILES':
            open_advance_window_folderwithpdb(newloc, pdbfolder_dict_options)

    if event == '-BUTTONCLUSTERADVANCE-':
        loc = window.current_location()
        x, y = window.size
        newloc = (loc[0] + (x / 2.)*0.5, loc[1] + (y / 2.)*0.5)
        if window['-COMBO_CLUSTER-'].get().upper() == 'RMSD':
            open_advance_window_cluster_qmrmsd(newloc, cluster_qmrmsd_dict_options)

    if event == '-CONFPACK-' or event == '-CONFPACK-_Enter':
        if window['-CONFPACK-'].get().upper() == 'EXTRACT FROM MD FRAME' or \
           window['-CONFPACK-'].get().upper() == 'SYSTEMATIC GRID':
            window['-BUTTONCHECK-'].update(disabled=False)
        else:
            window['-BUTTONCHECK-'].update(disabled=False)

    if event == '-ENV_COMBO-':
        if window['-ENV_COMBO-'].get().upper() == 'NONE':
            window['-BASH_EXTRAINFO-'].update("")
        elif window['-ENV_COMBO-'].get().upper() == 'ENV VAR GAUSSIAN':
            line = "g16legacy_root={}\n".format(os.path.split(window['-GAUSSIAN16PACK-'].get())[0])
            line += 'GAUSS_SCRDIR="$TMPDIR"\n'
            line += "source $g16legacy_root/bsd/g16.profile\n"
            line += "export g16legacy_root GAUSS_SCRDIR\n"
            window['-BASH_EXTRAINFO-'].update(line)
        elif window['-ENV_COMBO-'].get().upper() == 'DRAGO':
            line = "module purge\n"
            line += "module load gaussian\n"
            line += 'GAUSS_SCRDIR="$TMPDIR"\n'
            window['-BASH_EXTRAINFO-'].update(line)
        elif window['-ENV_COMBO-'].get().upper() == 'CESGA':
            line = "#SBATCH --mem=4G\n\n"
            line += "module purge\n"
            line += "module --ignore-cache avail\n"
            line += "module load cesga/2020 g16/c1"
            window['-BASH_EXTRAINFO-'].update(line)

    if event == '-BUTTONRUN-':

        for item in keys_all_mainguibuttons_labels:
            window[item].update(disabled=True)
        window.refresh()

        fulldbpath = os.path.join(window['-LOCAL_DIR-'].get(), window['-DATABASE_NAME-'].get())
        donepath = os.path.join(window['-LOCAL_DIR-'].get(), "done")
        if os.path.isfile(donepath):
            msg = "GeCos calculation seems to be finished."
            popup_msg(window, msg)
            window['-STATUS_TEXT-'].update("Status: Conformers calculated")
            window['-INFORUN_TEXT-'].update("Advice: Visualize Results")
            window['-BUTTONVIEWLOG-'].update(disabled=False)
            window['-BUTTONVISRESULTS-'].update(disabled=False)
            window['-BUTTONRUN-'].update(disabled=False)
        else:
            if not os.path.isfile(fulldbpath):
                msg = "Database is not available. GeCos will run conformer search."
                popup_msg(window, msg)
                window['-STATUS_TEXT-'].update("Status: Starting QM calculations.")
                window['-INFORUN_TEXT-'].update("Advice: Run GeCos to update results.")
                window['-BUTTONVIEWLOG-'].update(disabled=True)
                window['-BUTTONVISRESULTS-'].update(disabled=True)
                window['-BUTTONCREATESCRIPT-'].update(disabled=True)
                window['-BUTTONRUN-'].update(disabled=False)
            else:
                msg = "Database exists. GeCos will check the calculations."
                popup_msg(window, msg)
                window['-STATUS_TEXT-'].update("Status: Running QM calculations.")
                window['-INFORUN_TEXT-'].update("Advice: Run GeCos to check results.")
                window['-BUTTONVIEWLOG-'].update(disabled=False)
                window['-BUTTONVISRESULTS-'].update(disabled=False)
                window['-BUTTONRUN-'].update(disabled=False)
            if window['-HIDEPYTHONSCRIPT-'].get() == "":
                loc = window.current_location()
                filename = Sg.popup_get_file('Load python script to run GeCos', no_window=False,
                                             location=loc, initial_folder="../tests",
                                             file_types=(("Python Files", "*.py"),))
            else:
                filename = window['-HIDEPYTHONSCRIPT-'].get()

            import_pythonfile_to_gui(window, filename, rdkit_dict_options,
                                     openbabel_dict_options, extractmd_dict_options,
                                     systematicgrid_dict_options, pdbfolder_dict_options)

            if filename is not None:
                os.system("python "+filename)

        # for item in keys_all_mainguibuttons_labels:
        #     window[item].update(disabled=False)

    if event == '-BUTTONVISRESULTS-':
        open_window_results(window, vmd_path)

    if event == '-BUTTONVIEWLOG-':
        loc = window.current_location()
        open_window_log(window, loc)

    # ============= UPDATE EVENTS =============
    if event in keys_input_str_labels_enter:
        window['-BUTTONCHECK-'].update(disabled=False)
        window['-BUTTONEXPORTPYTHON-'].update(disabled=False)
        window['-BUTTONRUN-'].update(disabled=True)
        window['-STATUS_TEXT-'].update("Status: Data introduced by the user")
        window['-INFORUN_TEXT-'].update("Advice: Check keywords")

    if event in keys_input_list_labels_enter:
        window['-BUTTONCHECK-'].update(disabled=False)
        window['-BUTTONEXPORTPYTHON-'].update(disabled=False)
        window['-BUTTONRUN-'].update(disabled=True)
        window['-STATUS_TEXT-'].update("Status: Data introduced by the user")
        window['-INFORUN_TEXT-'].update("Advice: Check keywords")

    if event in keys_input_int_labels_enter:
        window['-BUTTONCHECK-'].update(disabled=False)
        window['-BUTTONEXPORTPYTHON-'].update(disabled=False)
        window['-BUTTONRUN-'].update(disabled=True)
        window['-STATUS_TEXT-'].update("Status: Data introduced by the user")
        window['-INFORUN_TEXT-'].update("Advice: Check keywords")

    if event in ["-WRITE_GAUSSIAN-"]:
        window['-BUTTONCHECK-'].update(disabled=False)
        window['-BUTTONEXPORTPYTHON-'].update(disabled=False)
        window['-BUTTONRUN-'].update(disabled=True)
        window['-STATUS_TEXT-'].update("Status: Data introduced by the user")
        window['-INFORUN_TEXT-'].update("Advice: Check keywords")

    if event in ["-RUN_GAUSSIAN-"]:
        window['-BUTTONCHECK-'].update(disabled=False)
        window['-BUTTONEXPORTPYTHON-'].update(disabled=False)
        window['-BUTTONRUN-'].update(disabled=True)
        window['-STATUS_TEXT-'].update("Status: Data introduced by the user")
        window['-INFORUN_TEXT-'].update("Advice: Check keywords")

    # ============= URL Events =============
    if event == "-DOCK_URL-":
        url = window['-DOCK_URL-'].get()
        webbrowser.open(url)

    if event == "-CONF_URL-":
        package = window['-CONFPACK-'].get()
        # print(package)

        if package.upper() == "RDKIT":
            url = "https://www.rdkit.org/"
            webbrowser.open(url)
        elif package.upper() == "OPENBABEL":
            url = "https://openbabel.org/wiki/Python"
            webbrowser.open(url)

    if event == '-LINK_AUTHOR-':
        url = "https://scholar.google.es/citations?user=ZSw8w94AAAAJ&hl=es"
        webbrowser.open(url)

    if event == '-LINK_DOCS-':
        cwd = os.getcwd()
        # print(cwd)
        url = "file://" + cwd + "/../docs/_build/html/index.html"
        webbrowser.open(url)

    if event == '-LINK_GITHUB-':
        url = "https://github.com/jrdcasa?tab=repositories"
        webbrowser.open(url)

    if event == '-GAUSSIAN16_EXTRAINFO_URL-':
        url = "https://gaussian.com/input/"
        webbrowser.open(url)

    # ============= Hoover mouse. Change Color =============
    if event == "-DOCK_URL-+MOUSE OVER+":
        window['-DOCK_URL-'].update(text_color="green")
    if event == "-DOCK_URL-+MOUSE AWAY+":
        window['-DOCK_URL-'].update(text_color="blue")

    if event == "-CONF_URL-+MOUSE OVER+":
        window['-CONF_URL-'].update(text_color="green")
    if event == "-CONF_URL-+MOUSE AWAY+":
        window['-CONF_URL-'].update(text_color="blue")

    if event == "-LINK_AUTHOR-+MOUSE OVER+":
        window['-LINK_AUTHOR-'].update(text_color="green")
    if event == "-LINK_AUTHOR-+MOUSE AWAY+":
        window['-LINK_AUTHOR-'].update(text_color="black")

    if event == "-LINK_DOCS-+MOUSE OVER+":
        window['-LINK_DOCS-'].update(text_color="green")
    if event == "-LINK_DOCS-+MOUSE AWAY+":
        window['-LINK_DOCS-'].update(text_color="black")

    if event == "-LINK_GITHUB-+MOUSE OVER+":
        window['-LINK_GITHUB-'].update(text_color="green")
    if event == "-LINK_GITHUB-+MOUSE AWAY+":
        window['-LINK_GITHUB-'].update(text_color="black")

    if event == "-GAUSSIAN16_URL-+MOUSE OVER+":
        window['-GAUSSIAN16_URL-'].update(text_color="green")
    if event == "-GAUSSIAN16_URL-+MOUSE AWAY+":
        window['-GAUSSIAN16_URL-'].update(text_color="black")

    if event == "-GAUSSIAN16_EXTRAINFO_URL-+MOUSE OVER+":
        window['-GAUSSIAN16_EXTRAINFO_URL-'].update(text_color="green")
    if event == "-GAUSSIAN16_EXTRAINFO_URL-+MOUSE AWAY+":
        window['-GAUSSIAN16_EXTRAINFO_URL-'].update(text_color="black")

    # ============= PROPERTIES =============
    keys_freq = ['-INPUT_SCALEVAL_FREQ-', '-CHECKBOX_ANHAR_FREQ-']
    keys_prop = ['-INPUT_METHOD_PROP-', '-INPUT_BASISSET_PROP-', '-COMBO_MODELSOLVENT_PROP-',
                 '-COMBO_SOLVENT_PROP-', '-INPUT_OTHERSOLV_PROP-',
                 '-RADIO_FREQ-', '-INPUT_SCALEVAL_FREQ-', '-CHECKBOX_ANHAR_FREQ-',
                 '-RADIO_ESPWFN-', '-RADIO_SP-', '-CHECKBOX_PROP_OPT-']
    keys_prop_enter = ['-INPUT_METHOD_PROP-_Enter', '-INPUT_BASISSET_PROP-_Enter',
                       '-COMBO_MODELSOLVENT_PROP-', '-COMBO_SOLVENT_PROP-',
                       '-INPUT_OTHERSOLV_PROP-_Enter', '-RADIO_FREQ-',
                       '-INPUT_SCALEVAL_FREQ-_Enter', '-CHECKBOX_ANHAR_FREQ-',
                       '-RADIO_ESPWFN-', '-RADIO_SP-', '-CHECKBOX_PROP_OPT-']

    keys_radio = ['-RADIO_SP-', '-RADIO_FREQ-', '-RADIO_ESPWFN-']

    dict_properties = defaultdict()

    # ======== BIND Keys to PROPERTIES ============
    for item in keys_prop:
        window[item].bind("<Return>", "_Enter")
        window[item].bind("<Tab>", "_Enter")
    for item in keys_freq:
        window[item].bind("<Return>", "_Enter")
        window[item].bind("<Tab>", "_Enter")
    for item in keys_properties:
        window[item].bind("<Return>", "_Enter")
        window[item].bind("<Tab>", "_Enter")

    if event in keys_prop_enter:

        method = window['-INPUT_METHOD_PROP-'].get()
        basis_set = window['-INPUT_BASISSET_PROP-'].get()
        if len(basis_set) == 0:
            line_master = "#p {}".format(method)
        else:
            line_master = "#p {}/{}".format(method, basis_set)

        if window['-CHECKBOX_PROP_OPT-'].get():
            line_master = line_master + "  opt"

        if window['-COMBO_MODELSOLVENT_PROP-'].get() != "None":
            if window['-COMBO_SOLVENT_PROP-'].get() != "None":
                line_master += "  scrf=({}, solvent={})".format(window['-COMBO_MODELSOLVENT_PROP-'].get(),
                                                                window['-COMBO_SOLVENT_PROP-'].get())
            else:
                line_master += "  scrf=({})".format(window['-COMBO_MODELSOLVENT_PROP-'].get())

        line = ""
        if window['-RADIO_FREQ-'].get():
            for ikey in keys_freq:
                window[ikey].update(disabled=False)
                window[ikey].update(text_color="black")
            if window['-CHECKBOX_ANHAR_FREQ-'].get():
                line = line_master + "  freq=anharm"
            else:
                line = line_master + "  freq scale={}".format(window['-INPUT_SCALEVAL_FREQ-'].get())
        elif window['-RADIO_ESPWFN-'].get():
            line = line_master + "  int=grid=ultrafine scf=(maxcycle=5000) geom=connectivity " \
                                 "pop=(full,chelpg,readradii) output=wfn IOp(3/33=1) nosymm"
            for ikey in keys_freq:
                window[ikey].update(disabled=True)
                window[ikey].update(text_color="gray")
        elif window['-RADIO_SP-'].get():
            line = line_master
            for ikey in keys_freq:
                window[ikey].update(disabled=True)
                window[ikey].update(text_color="gray")

        window['-KEYWORD_LINE-'].update(value=line)
        window['-EXPORTPYTHON_PROP-'].update(disabled=False)

    if event == "-QM_PROP_MOL2LOCAL_DIR-_Enter" or event == "-QM_PROP_CUTOFF_ENERGY-_Enter":
        update_listmol2(window)
        window['-EXPORTPYTHON_PROP-'].update(disabled=False)

    if event == "-QM_PROP_LOCAL_DIR-_Enter" or event == "-QM_PROP_REMOTE_DIR-_Enter" \
            or event == "-INPUT_LOG_PROP-_Enter" or event == "-INPUT_DATABASE_PROP-_Enter":
        window['-EXPORTPYTHON_PROP-'].update(disabled=False)

    if window['-COMBO_SOLVENT_PROP-'].get() == "Other...":
        window['-INPUT_OTHERSOLV_PROP-'].update(visible=True)
        window['-TEXT_OTHERSOLVWEB_PROP-'].update(visible=True)
        if event == "-TEXT_OTHERSOLVWEB_PROP-+MOUSE OVER+":
            window['-LINK_GITHUB-'].update(text_color="green")
        if event == "-TEXT_OTHERSOLVWEB_PROP-+MOUSE AWAY+":
            window['-LINK_GITHUB-'].update(text_color="black")
    else:
        window['-INPUT_OTHERSOLV_PROP-'].update(visible=False)
        window['-TEXT_OTHERSOLVWEB_PROP-'].update(visible=False)

    if event == '-TEXT_OTHERSOLVWEB_PROP-':
        url = "https://gaussian.com/scrf/"
        webbrowser.open(url)

    if event == '-BUTTONRUN_PROP-':

        res, key = check_parameteres_prop_gui(window, dict_properties)
        loc = window.current_location()
        x, y = window.size
        newloc = (loc[0] + (x / 2.)*0.5, loc[1] + (y / 2.)*0.5)
        if res:
            Sg.popup('Keywords seem to be correct for properties!!!\n'
                     'Properties jobs will be send',
                     title='Check Inputs',
                     grab_anywhere=True, location=newloc, image=lizard_gif)

            update_listmol2(window)
            type_prop = "NOPROP"
            for ikey in keys_radio:
                if window[ikey].get():
                    type_prop = ikey[1:-1].split("_")[-1]

            filename = os.path.join(dict_properties['p_localdir'], "Property_"+type_prop+".py")
            write_python_script_prop_from_gui(window, filename, dict_properties)

            window['-PROP_HIDEINPUTSCRIPT-'].update(value=filename)
            if filename is not None:
                os.system("python "+filename)

    if event == '-IMPORTPYTHON_PROP-':

        loc = window.current_location()
        # x, y = window.size
        # newloc = (loc[0] + (x / 2.)*0.5, loc[1] + (y / 2.)*0.5)

        filename_py = Sg.popup_get_file('Import Property Python file to GUI', no_window=False,
                                        location=loc,
                                        file_types=(("Python Files", "*.py"),))

        import_pythonfileprops_to_gui(window, filename_py)
        window['-BUTTONRUN_PROP-'].update(disabled=False)
        window['-EXPORTPYTHON_PROP-'].update(disabled=False)
        update_listmol2(window)

    if event == '-EXPORTPYTHON_PROP-':

        res, key = check_parameteres_prop_gui(window, dict_properties)

        if not res:
            msg = "ERROR {} is not correct.".format(key)
            popup_error(window, msg)
            window['-EXPORTPYTHON_PROP-'].update(disabled=True)
        else:
            update_listmol2(window)
            type_prop = "NOPROP"
            for ikey in keys_radio:
                if window[ikey].get():
                    type_prop = ikey[1:-1].split("_")[-1]

            loc = window.current_location()
            x, y = window.size
            newloc = (loc[0] + (x / 2.)*0.5, loc[1] + (y / 2.)*0.5)
            Sg.popup('File \"Property_{}.py\" is written.\n'.format(type_prop),
                     title='Check Inputs',
                     grab_anywhere=True, location=newloc, image=lizard_gif)
            filename = os.path.join(dict_properties['p_localdir'], "Property_" + type_prop + ".py")
            write_python_script_prop_from_gui(window, filename, dict_properties)
